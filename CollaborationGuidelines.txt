Working with the ChatGPT Agent in DesktopApplicationTemplate
==========================================================

Environment Setup
-----------------
- Install the .NET SDK version `8.0.404` (pinned via `global.json`).
- Install the WPF workload:

  ```bash
  dotnet workload install wpf
  ```

- Standard commands for builds and tests:

  ```bash
  dotnet restore
  dotnet build DesktopApplicationTemplate.sln
  dotnet test --settings tests.runsettings
  ```

Effective Collaboration Techniques
----------------------------------
- Provide clear goals, file paths, and context for each task.
- Prefer small, incremental changes that compile and test quickly.
- Run programmatic checks after modifications and share their output.
- Use `rg` or targeted `find` commands instead of recursive `ls` or `grep`.

GitHub Workflow Notes
---------------------
- Keep changes on the main branch and make atomic commits with descriptive messages.
- After all code updates, run `dotnet test` and include the output in the pull request.
- Only committed code is evaluated, so ensure the working tree is clean before calling `make_pr`.

Documentation Style
-------------------
- When updating `docs/CHANGELOG.md` or `docs/CollaborationAndDebugTips.txt`, find the existing topic and insert new notes within that block.
- Add a timestamp only when starting a new topic to prevent redundant entries.

Draw.io Integration
-------------------
- Store architecture diagrams as `.drawio` files in the `design` directory.
- Export diagrams to `.png` for quick review while keeping the editable `.drawio` source under version control.
- Describe diagram updates in commit messages or pull requests so reviewers understand their purpose.

Unit Testing Insights
---------------------
- Tests use xUnit with Moq for mocking and reside in `DesktopApplicationTemplate.Tests`.
- Prefer isolated tests that validate one behavior and use expressive method names.
- Configure dependencies through DI to keep tests focused and deterministic.
- Run tests with `dotnet test` to ensure stability across platforms and CI environments.

Miscellaneous Tips
------------------
- Validate all file paths, indexes, and dictionary keys before use to avoid runtime errors.
- Favor async/await patterns to keep the UI responsive and avoid deadlocks.
- Reuse existing services and view models instead of duplicating logic.
- Maintain clear, purpose-driven variable names for readability and maintainability.

Working in restricted environments
----------------------------------
- Review AGENTS and docs.
- Note limitations (tests, writes) in PRs or collaboration log.

[2025-08-15 10:00] Topic: MQTT options and DI
Context: Introduced `MqttServiceOptions` with DI support and consolidated registrations using `IOptions`.
Observations: Added `MessageRoutingService` and verified the service provider builds cleanly.
Codex Limitations noticed: pwsh not available for add-tip script.
Effective Prompts / Instructions that worked: Register options and inject via DI.
Decisions & Rationale: Use `IOptions` to supply defaults and centralize configuration.
Action Items: Run tests.
Related Commits/PRs:
[2025-08-19 14:42] Topic: MQTT connection editor
Context: Added window for editing MQTT connection settings from tag subscriptions.
Observations: Introduced dedicated view model with update, cancel, and unsubscribe commands.
Codex Limitations noticed: none
Effective Prompts / Instructions that worked: follow MVVM and DI registration guidelines.
Decisions & Rationale: Separate connection editing to keep subscription view focused.
Action Items: run tests
Related Commits/PRs:

[2025-08-20 13:26] Topic: Build error fixes
Context: Build failed due to logging package downgrade and duplicate MQTT subscribe method.
Observations: Resolved package downgrade and MQTT subscription build errors by updating logging abstractions, exposing connection helpers, and initializing required fields.
Codex Limitations noticed: Linux container lacks Microsoft.WindowsDesktop runtime so tests cannot execute.
Effective Prompts / Instructions that worked: clarify specific compiler errors and upgrade paths.
Decisions & Rationale: remove duplicate SubscribeAsync method and add async command helpers for testability.
Action Items: Rely on CI for full test run.
Related Commits/PRs:
