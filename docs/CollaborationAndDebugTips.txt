Collaboration & Debug Tips (Codex <-> Matt)
===========================================

Purpose: Running log of what worked, what broke, and why.

Effective Collaboration Techniques
----------------------------------
- Provide clear goals, file paths, and context for each task.
- Prefer small, incremental changes that compile and test quickly.
- Run programmatic checks after modifications and share their output.
- Use `rg` or targeted `find` commands instead of recursive `ls` or `grep`.

GitHub Workflow Notes
---------------------
- Keep changes on the main branch and make atomic commits with descriptive messages.
- After all code updates, run `dotnet test` and include the output in the pull request.
- Only committed code is evaluated, so ensure the working tree is clean before calling `make_pr`.

Draw.io Integration
-------------------
- Store architecture diagrams as `.drawio` files in the `design` directory.
- Export diagrams to `.png` for quick review while keeping the editable `.drawio` source under version control.
- Describe diagram updates in commit messages or pull requests so reviewers understand their purpose.

Unit Testing Insights
---------------------
- Tests use xUnit with Moq for mocking and reside in `DesktopApplicationTemplate.Tests`.
- Prefer isolated tests that validate one behavior and use expressive method names.
- Configure dependencies through DI to keep tests focused and deterministic.
- Run tests with `dotnet test` to ensure stability across platforms and CI environments.

Miscellaneous Tips
------------------
- Validate all file paths, indexes, and dictionary keys before use to avoid runtime errors.
- Favor async/await patterns to keep the UI responsive and avoid deadlocks.
- Reuse existing services and view models instead of duplicating logic.
- Maintain clear, purpose-driven variable names for readability and maintainability.

Collaboration Log
-----------------

[2025-08-13 17:00] Topic: Logging DI refactor
Context: Introduced constructor injection for logging services and confirmation helpers.
Observations: Simplifies testing and removes static logger state.
Codex Limitations noticed: Unable to execute Windows-specific tests in container.
Effective Prompts / Instructions that worked: n/a
Decisions & Rationale: Use DI to share single logging service and helpers.
Action Items: Monitor CI for Windows-specific behaviors.
Related Commits/PRs: (this PR)

[2025-08-13 20:41] Topic: WPF workload in CI
Context: GitHub Actions failed because the `windowsdesktop` workload is no longer recognized.
Observations: Replacing it with the `wpf` workload restores pipeline compatibility.
Codex Limitations noticed: none
Effective Prompts / Instructions that worked: verifying commands against GitHub runners.
Decisions & Rationale: Use the `wpf` workload across build, test, quality, and packaging jobs.
Action Items: Monitor CI for workload availability changes.
Related Commits/PRs: (this PR)

[2025-08-13 17:40] Topic: Navigation bar logo
Context: Replaced placeholder text with application logo in main window.
Observations: Logo displays brand and cleans up header.
Codex Limitations noticed: none
Effective Prompts / Instructions that worked: n/a
Decisions & Rationale: Use embedded image resource for branding.
Action Items: none
Related Commits/PRs: (this PR)

[2025-08-13 17:52] Topic: Logo resource path fix
Context: Navigation bar logo failed to render because image path was relative to the view folder.
Observations: Using a root-relative path loads the embedded image correctly.
Codex Limitations noticed: none
Effective Prompts / Instructions that worked: Providing exact asset location.
Decisions & Rationale: Use root-relative resource paths for WPF assets.
Action Items: Ensure future asset references include leading slash.
Related Commits/PRs: (this PR)

[2025-08-13 18:09] Topic: CI runs on feature branches
Context: Enabled GitHub Actions to execute tests on pushes to `feature/**` and `bugfix/**` branches.
Observations: Codex can push code to trigger remote tests without local execution.
Codex Limitations noticed: `dotnet test` cannot run `net8.0-windows` tests on Linux.
Effective Prompts / Instructions that worked: Configuring push patterns and `workflow_dispatch`.
Decisions & Rationale: Use GitHub-hosted runners to centralize validation.
Action Items: Monitor CI runs for unexpected failures.
Related Commits/PRs: (this PR)
[2025-08-13 18:28] Topic: CI workflow consolidation
Context: Unified multiple GitHub workflows into a single pipeline and added AGENTS instructions to review changelog and collaboration tips.
Observations: Centralized CI reduces maintenance overhead.
Codex Limitations noticed: none
Effective Prompts / Instructions that worked: n/a
Decisions & Rationale: Single pipeline with build, test, quality, and packaging jobs.
Action Items: Monitor self-heal integration with new pipeline.
Related Commits/PRs: (this PR)
[2025-08-13 18:50] Topic: On-demand CI via /test comment
Context: Enabled `/test` comment workflow and documented CI-only testing policy.
Observations: CI can run without local test execution.
Codex Limitations noticed: Tests cannot run on Linux container; rely on GitHub Actions.
Effective Prompts / Instructions that worked: Using comment trigger pattern from user guidance.
Decisions & Rationale: Centralize validation in CI and enforce via docs and PR template.
Action Items: Ensure branch protection requires CI.
Related Commits/PRs: (this PR)
[2025-08-13 19:01] Topic: Async command refactor
Context: Introduced AsyncRelayCommand and async script evaluation to prevent UI blocking.
Observations: Async command simplifies long-running actions and avoids deadlocks.
Codex Limitations noticed: PowerShell unavailable; tip appended manually.
Effective Prompts / Instructions that worked: n/a
Decisions & Rationale: Use AsyncRelayCommand for operations needing await without blocking.
Action Items: Monitor for unhandled exceptions in async commands.
Related Commits/PRs: (this PR)
[2025-08-13 19:42] Topic: Remove unused classes
Context: Cleaned up obsolete logging and template control types.
Observations: Deleting `RichTextLogger` and installer `CustomControl1` simplified the codebase with no build impact.
Codex Limitations noticed: none
Effective Prompts / Instructions that worked: n/a
Decisions & Rationale: Prefer removing stale classes to reduce maintenance and confusion.
Action Items: Monitor builds for any lingering references.
Related Commits/PRs: (this PR)

[2025-08-13 20:59] Topic: Service log clarity and doc consolidation
Context: Prefixed service logs with their names and merged root collaboration tips into docs.
Observations: Aggregated logs now identify their source and collaboration guidance lives in a single file.
Codex Limitations noticed: n/a
Effective Prompts / Instructions that worked: User request for clearer service association and deduplication.
Decisions & Rationale: Include service names in log entries and remove duplicate tip file.
Action Items: Monitor log readability and doc usage.
Related Commits/PRs: (this PR)
